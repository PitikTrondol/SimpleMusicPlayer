package anridiaf.playground.simplemusicplayer.ui

import android.util.Log
import androidx.media3.common.Player
import androidx.media3.common.Player.Commands
import androidx.media3.common.Player.Events

fun getEventList(events: Events): List<Int> {
    return (0 until events.size()).map {
        events.get(it)
    }
}

fun logEvent(events: Events) {
    val test = (0 until events.size()).map {
        mapEvent[events.get(it)]
    }
    Log.e("AFRI", test.joinToString("\n"))
    Log.d("AFRI", "---------------------------")
}

val mapEvent = mapOf(
    Pair(Player.EVENT_TIMELINE_CHANGED, "Player.EVENT_TIMELINE_CHANGED"),
    Pair(Player.EVENT_MEDIA_ITEM_TRANSITION, "Player.EVENT_MEDIA_ITEM_TRANSITION"),
    Pair(Player.EVENT_TRACKS_CHANGED, "Player.EVENT_TRACKS_CHANGED"),
    Pair(Player.EVENT_IS_LOADING_CHANGED, "Player.EVENT_IS_LOADING_CHANGED"),
    Pair(Player.EVENT_PLAYBACK_STATE_CHANGED, "Player.EVENT_PLAYBACK_STATE_CHANGED"),
    Pair(Player.EVENT_PLAY_WHEN_READY_CHANGED, "Player.EVENT_PLAY_WHEN_READY_CHANGED"),
    Pair(
        Player.EVENT_PLAYBACK_SUPPRESSION_REASON_CHANGED,
        "Player.EVENT_PLAYBACK_SUPPRESSION_REASON_CHANGED"
    ),
    Pair(Player.EVENT_IS_PLAYING_CHANGED, "Player.EVENT_IS_PLAYING_CHANGED"),
    Pair(Player.EVENT_REPEAT_MODE_CHANGED, "Player.EVENT_REPEAT_MODE_CHANGED"),
    Pair(Player.EVENT_SHUFFLE_MODE_ENABLED_CHANGED, "Player.EVENT_SHUFFLE_MODE_ENABLED_CHANGED"),
    Pair(Player.EVENT_PLAYER_ERROR, "Player.EVENT_PLAYER_ERROR"),
    Pair(Player.EVENT_POSITION_DISCONTINUITY, "Player.EVENT_POSITION_DISCONTINUITY"),
    Pair(Player.EVENT_PLAYBACK_PARAMETERS_CHANGED, "Player.EVENT_PLAYBACK_PARAMETERS_CHANGED"),
    Pair(Player.EVENT_AVAILABLE_COMMANDS_CHANGED, "Player.EVENT_AVAILABLE_COMMANDS_CHANGED"),
    Pair(Player.EVENT_MEDIA_METADATA_CHANGED, "Player.EVENT_MEDIA_METADATA_CHANGED"),
    Pair(Player.EVENT_SEEK_BACK_INCREMENT_CHANGED, "Player.EVENT_SEEK_BACK_INCREMENT_CHANGED"),
    Pair(
        Player.EVENT_SEEK_FORWARD_INCREMENT_CHANGED,
        "Player.EVENT_SEEK_FORWARD_INCREMENT_CHANGED"
    ),
    Pair(
        Player.EVENT_MAX_SEEK_TO_PREVIOUS_POSITION_CHANGED,
        "Player.EVENT_MAX_SEEK_TO_PREVIOUS_POSITION_CHANGED"
    ),
    Pair(
        Player.EVENT_TRACK_SELECTION_PARAMETERS_CHANGED,
        "Player.EVENT_TRACK_SELECTION_PARAMETERS_CHANGED"
    ),
    Pair(Player.EVENT_AUDIO_ATTRIBUTES_CHANGED, "Player.EVENT_AUDIO_ATTRIBUTES_CHANGED"),
    Pair(Player.EVENT_AUDIO_SESSION_ID, "Player.EVENT_AUDIO_SESSION_ID"),
)

fun logState(state: Int) {
    Log.e("AFRI", "STATE :: ${mapState[state]}")
}

val mapState = mapOf(
    Pair(Player.STATE_IDLE, "Player.STATE_IDLE"),
    Pair(Player.STATE_BUFFERING, "Player.STATE_BUFFERING"),
    Pair(Player.STATE_READY, "Player.STATE_READY"),
    Pair(Player.STATE_ENDED, "Player.STATE_ENDED")
)

fun getCommandList(commands: Commands): List<Int> {
    return (0 until commands.size()).map {
        commands.get(it)
    }
}

val mapCommands = mapOf(
    Pair(Player.COMMAND_PLAY_PAUSE, "Player.COMMAND_PLAY_PAUSE"),
    Pair(Player.COMMAND_PREPARE, "Player.COMMAND_PREPARE"),
    Pair(Player.COMMAND_STOP, "Player.COMMAND_STOP"),
    Pair(Player.COMMAND_SEEK_TO_DEFAULT_POSITION, "Player.COMMAND_SEEK_TO_DEFAULT_POSITION"),
    Pair(Player.COMMAND_SEEK_IN_CURRENT_MEDIA_ITEM, "Player.COMMAND_SEEK_IN_CURRENT_MEDIA_ITEM"),
    Pair(Player.COMMAND_SEEK_TO_PREVIOUS_MEDIA_ITEM, "Player.COMMAND_SEEK_TO_PREVIOUS_MEDIA_ITEM"),
    Pair(Player.COMMAND_SEEK_TO_PREVIOUS, "Player.COMMAND_SEEK_TO_PREVIOUS"),
    Pair(Player.COMMAND_SEEK_TO_NEXT_MEDIA_ITEM, "Player.COMMAND_SEEK_TO_NEXT_MEDIA_ITEM"),
    Pair(Player.COMMAND_SEEK_TO_NEXT, "Player.COMMAND_SEEK_TO_NEXT"),
    Pair(Player.COMMAND_SEEK_TO_MEDIA_ITEM, "Player.COMMAND_SEEK_TO_MEDIA_ITEM"),
    Pair(Player.COMMAND_SEEK_BACK, "Player.COMMAND_SEEK_BACK"),
    Pair(Player.COMMAND_SEEK_FORWARD, "Player.COMMAND_SEEK_FORWARD"),
    Pair(Player.COMMAND_SET_SPEED_AND_PITCH, "Player.COMMAND_SET_SPEED_AND_PITCH"),
    Pair(Player.COMMAND_SET_SHUFFLE_MODE, "Player.COMMAND_SET_SHUFFLE_MODE"),
    Pair(Player.COMMAND_SET_REPEAT_MODE, "Player.COMMAND_SET_REPEAT_MODE"),
    Pair(Player.COMMAND_GET_CURRENT_MEDIA_ITEM, "Player.COMMAND_GET_CURRENT_MEDIA_ITEM"),
    Pair(Player.COMMAND_GET_TIMELINE, "Player.COMMAND_GET_TIMELINE"),
    Pair(Player.COMMAND_GET_METADATA, "Player.COMMAND_GET_METADATA"),
    Pair(Player.COMMAND_SET_PLAYLIST_METADATA, "Player.COMMAND_SET_PLAYLIST_METADATA"),
    Pair(Player.COMMAND_SET_MEDIA_ITEM, "Player.COMMAND_SET_MEDIA_ITEM"),
    Pair(Player.COMMAND_CHANGE_MEDIA_ITEMS, "Player.COMMAND_CHANGE_MEDIA_ITEMS"),
    Pair(Player.COMMAND_GET_AUDIO_ATTRIBUTES, "Player.COMMAND_GET_AUDIO_ATTRIBUTES"),
    Pair(Player.COMMAND_GET_VOLUME, "Player.COMMAND_GET_VOLUME"),
    Pair(Player.COMMAND_GET_DEVICE_VOLUME, "Player.COMMAND_GET_DEVICE_VOLUME"),
    Pair(Player.COMMAND_SET_VOLUME, "Player.COMMAND_SET_VOLUME"),
    Pair(Player.COMMAND_SET_DEVICE_VOLUME, "Player.COMMAND_SET_DEVICE_VOLUME"),
    Pair(
        Player.COMMAND_SET_DEVICE_VOLUME_WITH_FLAGS,
        "Player.COMMAND_SET_DEVICE_VOLUME_WITH_FLAGS"
    ),
    Pair(Player.COMMAND_ADJUST_DEVICE_VOLUME, "Player.COMMAND_ADJUST_DEVICE_VOLUME"),
    Pair(
        Player.COMMAND_ADJUST_DEVICE_VOLUME_WITH_FLAGS,
        "Player.COMMAND_ADJUST_DEVICE_VOLUME_WITH_FLAGS"
    ),
    Pair(Player.COMMAND_SET_AUDIO_ATTRIBUTES, "Player.COMMAND_SET_AUDIO_ATTRIBUTES"),
    Pair(Player.COMMAND_SET_VIDEO_SURFACE, "Player.COMMAND_SET_VIDEO_SURFACE"),
    Pair(Player.COMMAND_GET_TEXT, "Player.COMMAND_GET_TEXT"),
    Pair(
        Player.COMMAND_SET_TRACK_SELECTION_PARAMETERS,
        "Player.COMMAND_SET_TRACK_SELECTION_PARAMETERS"
    ),
    Pair(Player.COMMAND_GET_TRACKS, "Player.COMMAND_GET_TRACKS"),
    Pair(Player.COMMAND_RELEASE, "Player.COMMAND_RELEASE"),
)

val mapTransitionReason = mapOf(
    Pair(Player.MEDIA_ITEM_TRANSITION_REASON_REPEAT, "Player.MEDIA_ITEM_TRANSITION_REASON_REPEAT"),
    Pair(Player.MEDIA_ITEM_TRANSITION_REASON_AUTO, "Player.MEDIA_ITEM_TRANSITION_REASON_AUTO"),
    Pair(Player.MEDIA_ITEM_TRANSITION_REASON_SEEK, "Player.MEDIA_ITEM_TRANSITION_REASON_SEEK"),
    Pair(
        Player.MEDIA_ITEM_TRANSITION_REASON_PLAYLIST_CHANGED,
        "Player.MEDIA_ITEM_TRANSITION_REASON_PLAYLIST_CHANGED"
    ),
)

val mapDiscontinuityReason = mapOf(
    Pair(Player.DISCONTINUITY_REASON_AUTO_TRANSITION, "Player.DISCONTINUITY_REASON_AUTO_TRANSITION"),
    Pair(Player.DISCONTINUITY_REASON_SEEK, "Player.DISCONTINUITY_REASON_SEEK"),
    Pair(Player.DISCONTINUITY_REASON_SEEK_ADJUSTMENT, "Player.DISCONTINUITY_REASON_SEEK_ADJUSTMENT"),
    Pair(Player.DISCONTINUITY_REASON_SKIP, "Player.DISCONTINUITY_REASON_SKIP"),
    Pair(Player.DISCONTINUITY_REASON_REMOVE, "Player.DISCONTINUITY_REASON_REMOVE"),
    Pair(Player.DISCONTINUITY_REASON_INTERNAL, "Player.DISCONTINUITY_REASON_INTERNAL"),
    Pair(Player.DISCONTINUITY_REASON_SILENCE_SKIP, "Player.DISCONTINUITY_REASON_SILENCE_SKIP"),
)